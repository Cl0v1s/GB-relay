// Include Nodejs' net module.
const Net = require('net');
const { interpret, createMachine, assign } = require('xstate');
// The port number and hostname of the server.
const port = 6374;
const host = '192.168.1.74';

const { 
    MY_OLD_BOY, 
    emulators,
    POKEMON_ROM,
    MY_OLD_BOY_VERSION,
    CONNECT_EVENT,
    RECEIVE_EVENT,
    NEXT_EVENT,
    CLOSE_EVENT,
} = require('./common');
const { choose, raise } = require('xstate/lib/actions');

function receive(buffer) {
    console.log("Receiving from server", buffer.toString("hex"), "or", buffer.toString("ascii"));
}

function send(socket, buffer) {
    console.log("Sending to server ", buffer.toString("hex"), "or", buffer.toString("ascii"));
    socket.write(buffer);
}

const server = createMachine({
    predictableActionArguments: true,
    id: "server",
    initial: 'inactive',
    context: {
        socket: undefined,
        master: undefined,
    },
    states: {
        inactive: {
            on: {
                [CONNECT_EVENT]: {
                    target: "hello",
                    actions: assign({
                        socket: (ctx, event) => event.value,
                    })
                }
            }
        },
        hello: {
            entry: (ctx) => send(ctx.socket, Buffer.from(MY_OLD_BOY, "hex")),
            on: {
                [RECEIVE_EVENT]: {
                    actions: choose([
                        {
                            // scenario 1
                            cond: (ctx, event) => event.value.toString("hex") === MY_OLD_BOY,
                            actions: raise({ type: 'master' })
                        }, 
                        {
                            // scenario 2
                            cond: (ctx, event) => event.value.toString("hex") === `${MY_OLD_BOY}${POKEMON_ROM}`,
                            actions: raise({ type: 'slave' }),
                        },
                        {
                            actions: raise({ type: CLOSE_EVENT })
                        }
                    ])
                },
                slave: 'slave',
                master: 'master',
                [CLOSE_EVENT]: 'inactive',
            }
        },
        master: {
            entry: (ctx) => send(ctx.socket, Buffer.from(`${POKEMON_ROM}${MY_OLD_BOY_VERSION}`, "hex")),
            actions: assign({
                master: true,
            }),
            on: {
                [RECEIVE_EVENT]: {
                    actions: choose([
                        {
                            cond: (ctx, event) => event.value.toString("hex") === POKEMON_ROM,
                            actions: raise({ type: NEXT_EVENT })
                        },
                        {
                            actions: raise({ type: CLOSE_EVENT })
                        }
                    ])
                },
                [NEXT_EVENT]: 'playing',
                [CLOSE_EVENT]: 'inactive',
            }
        },
        slave: {
            entry: (ctx) => send(ctx.socket, Buffer.from(`${POKEMON_ROM}`, "hex")),
            actions: assign({
                master: false,
            }),
            on: {
                [RECEIVE_EVENT]: {
                    actions: choose([
                        {
                            cond: (ctx, event) => event.value.toString("hex") === MY_OLD_BOY_VERSION,
                            actions: raise({ type: NEXT_EVENT })
                        },
                        {
                            actions: raise({ type: CLOSE_EVENT })
                        }
                    ])
                },
                [NEXT_EVENT]: 'slaveVersion',
                [CLOSE_EVENT]: 'inactive',
            }
        },
        slaveVersion: {
            entry: (ctx) => send(ctx.socket, Buffer.from(`${MY_OLD_BOY_VERSION}`, "hex")),
            on: {
                [NEXT_EVENT]: 'playing',
                [CLOSE_EVENT]: 'inactive',
            }
        },
        playing: {
            entry: (ctx) => send(ctx.socket, Buffer.from(
                ``,
                "hex",
            ))
        
        },
        goodbye: {

        }
    }
});

const serverActor = interpret(server);
serverActor.subscribe((state) => console.log(state.value))
serverActor.start();


// Create a new TCP client.
const client = new Net.Socket();
// Send a connection request to the server.

client.connect(port, host, function() {
    serverActor.send({ type: CONNECT_EVENT, value: client })
});

// The client can also receive data from the server by reading from its socket.
client.on('data', function(chunk) {
    receive(chunk);
    serverActor.send({ type: RECEIVE_EVENT, value: chunk });
});

client.on('end', function() {
    console.log('Requested an end to the TCP connection');
});